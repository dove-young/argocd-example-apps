apiVersion: batch/v1
kind: Job
metadata:
  name: init-db
spec:
  template:
    spec:
      initContainers:
      - command:
        - sh
        - -c
        - 'until pg_isready --host {{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc --port {{ .Values.postgresql.port }} -U postgres; do echo waiting for database; sleep 2; done;'
        image: postgres:latest
        imagePullPolicy: IfNotPresent
        name: check-pqsql-online
      containers:
      - name: init-db
        image: postgres:latest
        command: 
        - psql 
        - --host
        - {{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc
        - --port
        - "{{ .Values.postgresql.port }}"
        - -U
        - postgres
        - -f
        - {{ .Values.postgresql.sql_path }}/{{ .Values.postgresql.sql_file }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: {{ .Values.postgresql.sql_path }}
          name: config
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      terminationGracePeriodSeconds: 30
      volumes:
      - name: config
        configMap:
          name: {{ .Release.Name }}-postgresql-init
          items:
          - key: db-init-sql
            path: {{ .Values.postgresql.sql_file }}
  backoffLimit: 4