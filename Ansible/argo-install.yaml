- hosts: master
  vars:
    argocd_server_external: "{{ groups['worker'][0]}}"
    nfs_src: "{{playbook_dir}}/external-storage/nfs/deploy/kubernetes"
  tasks:
    - name: Clone nfs provider
      git:
        repo: 'https://github.com/kubernetes-incubator/external-storage.git'
        dest: "{{playbook_dir}}/external-storage"
        depth: 1
        update: yes
        force: yes
    - name: patch nfs provider
      patch:
        src: "{{playbook_dir}}/files/nfs-provider.patch"
#        basedir: "{{playbook_dir}}/external-storage/nfs/deploy/kubernetes"
        basedir: "{{playbook_dir}}/external-storage"
        strip: 1         # known issue: https://github.com/ansible/ansible/issues/64130
    - name: install nfs provider
      k8s:                  ## yum install -y python2-openshift.noarch  in advance
        state: present
        src: "{{nfs_src}}/{{item}}"
        kubeconfig: /root/.kube/config
        namespace: default
      with_list:
        - class.yaml
        - claim.yaml
        - psp.yaml
        - rbac.yaml
        - statefulset.yaml
    - name: get argocd install yaml
      get_url:
        url: https://raw.githubusercontent.com/argoproj/argo-cd/v1.2.3/manifests/install.yaml
        dest: "{{playbook_dir}}/argocd/argocd-1.2.3-install.yaml"
#    - name: prepare argocd patch
#      template:
#        src:  files/argocd-1.2.3.patch.j2
#        dest: /tmp/argocd-1.2.3.patch
    - name: patch argocd install yaml
      patch:
        src: /tmp/argocd-1.2.3.patch
        basedir: "{{playbook_dir}}/argocd"
    - name: Create argocd namespace
      k8s:
        name: argocd
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /root/.kube/config 
    - k8s:
        state: present
        src: "{{playbook_dir}}/argocd/argocd-1.2.3-install.yaml"
        kubeconfig: /root/.kube/config
        namespace: argocd
    - name: argocd client
      get_url:
        url: https://github.com/argoproj/argo-cd/releases/download/v1.2.3/argocd-linux-amd64
        dest: /usr/local/bin/argocd
        mode: 755
    - name: check argocd client
      shell: |
          argocd help
      register: std
    - debug:
        var: std.stdout_lines
    - debug:
        var: std.stderr_lines
    - name: install argo workflow - cluster-role
      k8s:
        state: present
        definition: 
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: kube-system-binding-default
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: default
            namespace: kube-system 
    - name: get argo workflow install yaml
      get_url:
        url: https://raw.githubusercontent.com/argoproj/argo/v2.4.2/manifests/install.yaml
        dest: "{{playbook_dir}}/argo/argo-2.4.2-install.yaml"
    - name: Create argo namespace
      k8s:
        name: argo
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /root/.kube/config 
    - name: patch argo workflow installer
      patch:
        src: "{{playbook_dir}}/files/argo-workflow-2.4.2.patch"
        dest: "{{playbook_dir}}/argo/argo-2.4.2-install.yaml"
    - k8s:
        state: present
        src: "{{playbook_dir}}/argo/argo-2.4.2-install.yaml"
        kubeconfig: /root/.kube/config
        namespace: argo
    - name: argo client
      get_url:
        url: https://github.com/argoproj/argo/releases/download/v2.4.2/argo-linux-amd64
        dest: /usr/local/bin/argo
        mode: 755
    - name: minio install
      shell: |
        helm install stable/minio \
          --name argo-artifacts \
          --namespace argo \
          --set service.type=NodePort \
          --set defaultBucket.enabled=true \
          --set defaultBucket.name=my-bucket \
          --set persistence.enabled=true \
          --set fullnameOverride=argo-artifacts \
          --debug 2>&1
      register: std
    - debug:
        var: std.stdout_lines
    - debug:
        var: std.stderr_lines    
        
    - name: define ingress for argo-ui
      k8s:
        state: present
        definition:
          apiVersion: extensions/v1beta1
          kind: Ingress
          metadata:
            name: argo-ui-ingress
            namespace: argo
          spec:
            rules:
            - host: argo-ui.{{ groups['master'][0]}}.nip.io
              http:
                paths:
                - backend:
                    serviceName: argo-ui
                    servicePort: 80 
    - name: RBAC     ## https://github.com/argoproj/argo/issues/1723
      shell: |
        kubectl create clusterrolebinding argo-default-cluster-admin \
              --clusterrole=cluster-admin \
              --serviceaccount=argo:default 
        kubectl create clusterrolebinding default-default-cluster-admin \
              --clusterrole=cluster-admin \
              --serviceaccount=default:default 
      register: std
    - debug:
        var: std.stdout_lines
    - debug:
        var: std.stderr_lines
#    - name: minio install    ## known issue:  https://github.com/ansible/ansible/issues/64004
#      helm:
#        host: localhost
#        chart:
##          name: minio
#          source:
#            type: git
#            location: https://github.com/helm/charts.git
#            path: stable/minio
#        state: present
#        name: argo-artifacts
#        namespace: argo 
#        values:
#          service.type: NodePort 
#          defaultBucket.enabled: true 
#          defaultBucket.name: my-bucket 
#          persistence.enabled: true 
#          fullnameOverride: argo-artifacts